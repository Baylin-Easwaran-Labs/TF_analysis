library(limma)
library("tibble")
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/mae_allprobes.Rda")
meth.tcga = assays(mae)[[1]]
# exp.tcga = assays(mae)[[2]]
dim(meth.tcga)
pheno.elmer = colData(mae)
table(pheno.elmer$TN)
normalTCGA.samples = rownames(pheno.elmer[pheno.elmer$TN == "Normal", ])
length(normalTCGA.samples)
load("/Users/yubabhandari/Documents/bioinformatics/metharray/ssa_jan_tcga/analysis_all/cimp_cemp/get450kProbeAnnotations.Rda")
ls()
save(autosomalProbes, file = "/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/data/autosomal_450k_Probes.Rda")
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/data/autosomal_450k_Probes.Rda")
meth.tcga.auto <- meth.tcga[rownames(meth.tcga) %in% autosomalProbes,]
dim(meth.tcga); dim(meth.tcga.auto)
colnames(meth.tcga.auto) = substr(colnames(meth.tcga.auto),1,16)
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/data/filtered_CRE_Probes.Rda")
length(dELS_CGI_probes) ; length(dELS_nonCGI_probes)
length(pELS_CGI_probes); length(pELS_nonCGI_probes)
length(PLS_CGI_probes); length(PLS_nonCGI_probes)
cre.probes = unique(na.omit(c(dELS_CGI_probes, dELS_nonCGI_probes)))
length(cre.probes)
meth.tcga.sort <- meth.tcga.auto[cre.probes[cre.probes %in% rownames(meth.tcga.auto)],]
dim(meth.tcga.sort)
meth.tcga.CpGiTSS.unmethNormal <- meth.tcga.CpGiTSS[apply(meth.tcga.CpGiTSS[ ,normalTCGA.samples], 1, mean) <= 0.2, ]
meth.tcga.sort <- meth.tcga.auto[cre.probes[cre.probes %in% rownames(meth.tcga.auto)],]
dim(meth.tcga.sort)
meth.tcga.sort.unmethNormal <- meth.tcga.sort[apply(meth.tcga.sort[ ,normalTCGA.samples], 1, mean) <= 0.2, ]
meth.tcga.sort.methNormal <- meth.tcga.sort[apply(meth.tcga.sort[ ,normalTCGA.samples], 1, mean) >= 0.6, ]
dim(meth.tcga.sort);  dim(meth.tcga.sort.unmethNormal); dim(meth.tcga.sort.methNormal)
design <- model.matrix(~0+factor(pheno.elmer$TN))
design
levels(factor(pheno.elmer$TN))
factor(pheno.elmer$TN)
head(pheno.elmer$TN)
head(design)
colnames(design) = levels(factor(pheno.elmer$TN))
head(design)
contrast.matrix = makeContrasts(Tumor - Normal, levels =design)
head(contrast.matrix)
lapply(list(meth.tcga.sort.unmethNormal), FUN=function(x, deltaBeta=0.2)
{
design <- model.matrix(~0+factor(pheno.elmer$TN))
colnames(design) = levels(factor(pheno.elmer$TN))
contrast.matrix = makeContrasts(Tumor - Normal, levels =design)
## check the design matrix to see if samples are read correctly acc. to pheno.elmer$TN
head(design); dim(design); head(pheno.elmer$TN); head(contrast.matrix)
fit <- lmFit(x, design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
# All comparison labels:
allComparisons <-  gsub(" - ",".vs.",colnames(contrast.matrix))
# Create list to hold all diff methylated probes
diffMethProbesAllComparisons=vector(mode="list", length=length(allComparisons))
names(diffMethProbesAllComparisons) <- allComparisons
# Create list to hold all diff methylated genes
diffMethGenesAllComparisons=vector(mode="list", length=length(allComparisons))
names(diffMethGenesAllComparisons) <- allComparisons
# Create list to hold toptables
topTablesAllComparisons <- vector(mode="list", length=length(allComparisons))
names(topTablesAllComparisons) <- allComparisons
# Get top differentially methylated probes between for each comparison:
for(i in 1:length(allComparisons)){
diffProbes <- topTable(fit2, coef=i, adjust="BH", number=nrow(x))
hyperMethProbes <- (diffProbes[diffProbes$logFC >= deltaBeta & diffProbes$adj.P.Val <= 0.05, "ID"])
hypoMethProbes <- (diffProbes[diffProbes$logFC <= -deltaBeta & diffProbes$adj.P.Val <= 0.05, "ID"])
diffMethProbesAllComparisons[[i]]["HyperMethProbes"] <- list(unique(hyperMethProbes))
diffMethProbesAllComparisons[[i]]["HypoMethProbes"] <- list(unique(hypoMethProbes))
topTablesAllComparisons[[i]] <- diffProbes
}
# Decide tests
decideTestsResults <- decideTests(fit2)
# Save output from this function to the workspace (global environment)
{
assign("diffMethProbesAllComparisons", diffMethProbesAllComparisons, envir=.GlobalEnv)
assign("topTablesAllComparisons", topTablesAllComparisons, envir=.GlobalEnv)
assign("decideTestsResults", decideTestsResults, envir=.GlobalEnv)
}
gc()
}
)
save(diffMethProbesAllComparisons, topTablesAllComparisons, decideTestsResults,
file = "/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/unmethNormal_dELS_Probes.Rda")
diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes
lapply(list(meth.tcga.sort.methNormal), FUN=function(x, deltaBeta=0.2)
{
design <- model.matrix(~0+factor(pheno.elmer$TN))
colnames(design) = levels(factor(pheno.elmer$TN))
contrast.matrix = makeContrasts(Tumor - Normal, levels =design)
## check the design matrix to see if samples are read correctly acc. to pheno.elmer$TN
head(design); dim(design); head(pheno.elmer$TN); head(contrast.matrix)
fit <- lmFit(x, design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
# All comparison labels:
allComparisons <-  gsub(" - ",".vs.",colnames(contrast.matrix))
# Create list to hold all diff methylated probes
diffMethProbesAllComparisons=vector(mode="list", length=length(allComparisons))
names(diffMethProbesAllComparisons) <- allComparisons
# Create list to hold all diff methylated genes
diffMethGenesAllComparisons=vector(mode="list", length=length(allComparisons))
names(diffMethGenesAllComparisons) <- allComparisons
# Create list to hold toptables
topTablesAllComparisons <- vector(mode="list", length=length(allComparisons))
names(topTablesAllComparisons) <- allComparisons
# Get top differentially methylated probes between for each comparison:
for(i in 1:length(allComparisons)){
diffProbes <- topTable(fit2, coef=i, adjust="BH", number=nrow(x))
hyperMethProbes <- (diffProbes[diffProbes$logFC >= deltaBeta & diffProbes$adj.P.Val <= 0.05, "ID"])
hypoMethProbes <- (diffProbes[diffProbes$logFC <= -deltaBeta & diffProbes$adj.P.Val <= 0.05, "ID"])
diffMethProbesAllComparisons[[i]]["HyperMethProbes"] <- list(unique(hyperMethProbes))
diffMethProbesAllComparisons[[i]]["HypoMethProbes"] <- list(unique(hypoMethProbes))
topTablesAllComparisons[[i]] <- diffProbes
}
# Decide tests
decideTestsResults <- decideTests(fit2)
# Save output from this function to the workspace (global environment)
{
assign("diffMethProbesAllComparisons", diffMethProbesAllComparisons, envir=.GlobalEnv)
assign("topTablesAllComparisons", topTablesAllComparisons, envir=.GlobalEnv)
assign("decideTestsResults", decideTestsResults, envir=.GlobalEnv)
}
gc()
}
)
save(diffMethProbesAllComparisons, topTablesAllComparisons, decideTestsResults,
file = "/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/methNormal_dELS_Probes.Rda")
diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes
diffMethProbesAllComparisons$Tumor.vs.Normal$HypoMethProbes
dels_hypo = diffMethProbesAllComparisons$Tumor.vs.Normal$HypoMethProbes
length(dels_hypo)
ls()
load("/Volumes/EaswaranLab-1/elmer_pancan/CRE/TF_analysis/coad/CGI_nCGI_comb/overall/diffMeth/methNormal_dELS_Probes.Rda")
ls()
length(intersect(diffMethProbesAllComparisons_CpGiTSS$Tumor.vs.Normal$HypoMethProbes))
length(intersect(diffMethProbesAllComparisons_CpGiTSS$Tumor.vs.Normal$HypoMethProbes, dels_hypo))
length(dels_hypo)
cre.type = "dELS"
dir.create(paste(wdir, cre.type, sep = "/"))
wdir = "/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code"
dir.create(paste(wdir, cre.type, sep = "/"))
for (meth.status in list("hyper", "hypo")) {
print(meth.status)
}
hyper.probes = 1:4
hypo.probes = 5:8
probes.meth = list(hyper = hyper.probes, hypo = hypo.probes)
probes.meth
for (meth.status in list("hyper", "hypo")) {
print("Loop 1")
}
probes.meth[1]
probes.meth["hyper"]
probes.meth[hyper]
for (meth.status in list("hyper", "hypo")) {
print(paste0("Finding enriched motifs for ", meth.status))
probes.meth[meth.status]
}
for (meth.status in list("hyper", "hypo")) {
print(paste0("Finding enriched motifs for ", meth.status))
print(probes.meth[meth.status])
}
probes.meth = list("hyper" = hyper.probes, hypo = hypo.probes)
probes.meth = list("hyper" = hyper.probes, "hypo" = hypo.probes)
for (meth.status in list("hyper", "hypo")) {
print(paste0("Finding enriched motifs for ", meth.status))
print(probes.meth[meth.status])
}
load("/Volumes/EaswaranLab-1/elmer_pancan/CRE/TF_analysis/coad/CGI_nCGI_comb/overall/diffMeth/unmethNormal_dELS_Probes.Rda")
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/unmethNormal_dELS_Probes.Rda")
hyper.probes = diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/methNormal_dELS_Probes.Rda")
hypo.probes = diffMethProbesAllComparisons$Tumor.vs.Normal$HypoMethProbes
hyper.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes))
hypo.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HypoMethProbes))
meth.tcga = assays(mae)[[1]]
load("~/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/mae_allprobes.Rda")
meth.tcga = assays(mae)[[1]]
dim(meth.tcga)
common.hyper = unique(intersect(hyper.probes, rownames(meth.tcga)))
common.hypo = unique(intersect(hypo.probes, rownames(meth.tcga)))
length(common.hyper); length(common.hypo)
hyper.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes))
length(hyper.probes)
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/unmethNormal_dELS_Probes.Rda")
hyper.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes))
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/methNormal_dELS_Probes.Rda")
hypo.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HypoMethProbes))
length(hyper.probes); length(hypo.probes)
meth.tcga = assays(mae)[[1]]
dim(meth.tcga)
common.hyper = unique(intersect(hyper.probes, rownames(meth.tcga)))
common.hypo = unique(intersect(hypo.probes, rownames(meth.tcga)))
length(common.hyper); length(common.hypo)
pheno.elmer = colData(mae)
pheno.elmer$TN
head(pheno.elmer)
meth.tcga[1:10, 1:10]
pheno.elmer$TN
group.col <- "TN"
group1 <-  "Tumor"
group2 <- "Normal"
for (meth.status in list("hyper", "hypo")) {
print(paste0("Finding enriched motifs for ", meth.status))
print(probes.meth[meth.status])
}
probes.meth = list("hyper" = common.hyper, "hypo" = common.hypo)
for (meth.status in list("hyper", "hypo")) {
print(paste0("Finding enriched motifs for ", meth.status))
print(probes.meth[meth.status])
}
for (meth.status in list("hyper", "hypo")) {
print(paste0("Finding enriched motifs for ", meth.status))
print(probes.meth[[meth.status]])
}
wdir = "/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code"
## specify which cis regulatory regions the analysis corresponds to: options("PLS", "pELS", "dELS")
cre.type = "dELS"
dir.create(paste(wdir, cre.type, sep = "/"))
setwd(wdir)
getwd
getwd()
group.col <- "TN"
group1 <-  "Tumor"
group2 <- "Normal"
probes.meth = list("hyper" = common.hyper, "hypo" = common.hypo)
setwd(wdir)
dir.create(paste(wdir, cre.type, sep = "/"))
for (meth.status in list("hyper", "hypo")) {
# print(probes.meth[[meth.status]])
print(paste0("Finding enriched motifs for ", meth.status))
#### Identify enriched motifs ####
enriched.motif <- get.enriched.motif(data = mae,
min.motif.quality = "DS",
probes = probes.meth[[meth.status]],
dir.out = meth.status,
label = meth.status,
min.incidence = 10,
lower.OR = 1.1)
#-------------------------------------------------------------
# Identifying regulatory TFs                        |
#-------------------------------------------------------------
print(paste0("Finding TFs for ", meth.status))
TF <- get.TFs(data           = mae,
enriched.motif = enriched.motif,
dir.out        = meth.status,
mode           = "unsupervised",
group.col      = group.col,
group1         = group1,
group2         = group2,
diff.dir       = meth.status,
cores          = 2,
label          = meth.status)
}
library(stringr)
library(TCGAbiolinks)
library(dplyr)
library(ELMER)
library(MultiAssayExperiment)
## specify your working directory
wdir = "/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code"
## specify which cis regulatory regions the analysis corresponds to: options("PLS", "pELS", "dELS")
cre.type = "dELS"
load("~/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/mae_allprobes.Rda")
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/unmethNormal_dELS_Probes.Rda")
hyper.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HyperMethProbes))
load("/Users/yubabhandari/Documents/bioinformatics/metharray/Jansen_TCGAcoad/manuscript/PNAS/revision/code/diff_meth/methNormal_dELS_Probes.Rda")
hypo.probes = as.character(na.omit(diffMethProbesAllComparisons$Tumor.vs.Normal$HypoMethProbes))
length(hyper.probes); length(hypo.probes)
meth.tcga = assays(mae)[[1]]
dim(meth.tcga)
common.hyper = unique(intersect(hyper.probes, rownames(meth.tcga)))
common.hypo = unique(intersect(hypo.probes, rownames(meth.tcga)))
length(common.hyper); length(common.hypo)
pheno.elmer = colData(mae)
pheno.elmer$TN
group.col <- "TN"
group1 <-  "Tumor"
group2 <- "Normal"
probes.meth = list("hyper" = common.hyper, "hypo" = common.hypo)
setwd(wdir)
dir.create(paste(wdir, cre.type, sep = "/"))
for (meth.status in list("hyper", "hypo")) {
# print(probes.meth[[meth.status]])
print(paste0("Finding enriched motifs for ", meth.status))
#### Identify enriched motifs ####
enriched.motif <- get.enriched.motif(data = mae,
min.motif.quality = "DS",
probes = probes.meth[[meth.status]],
dir.out = meth.status,
label = meth.status,
min.incidence = 10,
lower.OR = 1.1)
#-------------------------------------------------------------
# Identifying regulatory TFs                        |
#-------------------------------------------------------------
print(paste0("Finding TFs for ", meth.status))
TF <- get.TFs(data           = mae,
enriched.motif = enriched.motif,
dir.out        = meth.status,
mode           = "unsupervised",
group.col      = group.col,
group1         = group1,
group2         = group2,
diff.dir       = meth.status,
cores          = 2,
label          = meth.status)
}
paste0(cre.type, "_topTFs.Rda")
cre.type = "dELS"
paste0(cre.type, "_topTFs.Rda")
